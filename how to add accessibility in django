Setting Up Accessibility Features in Django
1. Set Up Django
First, ensure you have Django installed:

sh
Copy
Edit
pip install django
django-admin startproject myproject
cd myproject
python manage.py startapp myapp
Add 'myapp' to INSTALLED_APPS in settings.py.

2. Add ARIA Attributes in Templates
Django’s template system allows you to add ARIA (Accessible Rich Internet Applications) attributes easily.

html
Copy
Edit
<label for="username" aria-label="Enter your username">Username:</label>
<input type="text" id="username" name="username">
3. Use Django Forms for Accessible Forms
Django’s form system automatically associates labels with form fields.

python
Copy
Edit
from django import forms

class AccessibleForm(forms.Form):
    name = forms.CharField(label="Your Name", widget=forms.TextInput(attrs={"aria-required": "true"}))
    email = forms.EmailField(label="Your Email", widget=forms.EmailInput(attrs={"aria-describedby": "emailHelp"}))
4. Implement Keyboard Navigation
Ensure interactive elements are keyboard-friendly:

html
Copy
Edit
<button tabindex="0">Click Me</button>
5. Add Accessible Error Messages
Django provides error handling, but you can make it more accessible:

python
Copy
Edit
if form.errors:
    for field in form:
        for error in field.errors:
            print(f"<p role='alert'>{error}</p>")
6. Use Django Middleware for Accessibility
You can create a middleware to enforce accessibility checks.

python
Copy
Edit
from django.utils.deprecation import MiddlewareMixin

class AccessibilityMiddleware(MiddlewareMixin):
    def process_response(self, request, response):
        response["Content-Language"] = "en"
        return response
Add it to MIDDLEWARE in settings.py.

7. Test with Lighthouse and WAVE
Run accessibility audits using:

Google Lighthouse (Chrome DevTools)

WAVE (Web Accessibility Evaluation Tool)













base
.log-out-btn {
	background-color: var(--jonquil);
	padding: 8px 20px;
	border-radius: 5px;
	color: var(--davys-gray);
	font-weight: bold;
	text-decoration: none;
	transition: background-color 0.3s ease, color 0.3s ease;
}
.log-out-btn:hover {
	background-color: var(--blue-ncs);
	/* Keeps the button blue on hover */
	color: var(--white);
	/* Keeps the text white on hover */
}
base
    <header class="navbar">
        <div class="logo-container">
            <!-- Company logo and name -->
            <img src="{% static 'images/logo.png' %}" alt="Rolsa Technologies" class="logo">
            <span class="logo-text">Rolsa Technologies</span>
        </div>
        <div class="nav-toggle">&#9776;</div>
        <nav class="nav-links">
            <a href="{% url 'home' %}">Home</a>
            <a href="{% url 'products' %}">Products</a>
            <a href="{% url 'green_energy' %}">Green Energy Info</a>
            <a href="{% url 'carbon_calculator' %}">Carbon Calculator</a>
            <a href="{% url 'contact' %}">Contact Us</a>
            <a href="{% url 'booking' %}">Booking</a>

            {% if user.is_authenticated %}
                <a href="{% url 'dashboard' %}">Dashboard</a>
                <a href="{% url 'logout' %}" class="log-out-btn">Log Out</a>
            {% else %}
                <a href="{% url 'login' %}" class="sign-in-btn">Sign In</a>
            {% endif %}
        </nav>
    </header>

logsin
{% extends 'base.html' %}
{% load static %}
{% block content %}
<head>
    <link rel="stylesheet" href="{% static 'css/auth.css' %}">
</head>
<div class="auth-container">
    <div class="auth-background">
        <div class="auth-content">
            <h2>Sign in to your account</h2>
            <form method="POST">
                {% csrf_token %}
                {{ form.as_p }}
                <button type="submit" class="auth-btn">Sign in</button>
            </form>
            <p>Forgotten your password?</p>
            <hr class="divider">
            <p>Don't have an account? <a href="{% url 'register' %}" class="auth-link">Register</a></p>
        </div>
    </div>
</div>
{% endblock %}
egister
{% extends 'base.html' %}
{% load static %}
{% block content %}
<head>
    <link rel="stylesheet" href="{% static 'css/auth.css' %}">
</head>
<div class="auth-container">
    <div class="auth-background">
        <div class="auth-content">
            <h2>Create Your Account</h2>
            <form method="POST">
                {% csrf_token %}
                {{ form.as_p }}
                <button type="submit" class="auth-btn">Register</button>
            </form>
            <hr class="divider">
            <p>Already have an account? <a href="{% url 'login' %}" class="auth-link">Sign in</a></p>
        </div>
    </div>
</div>
{% endblock %}

{% extends 'base.html' %}
{% load static %}
{% block content %}
<head>
    <link rel="stylesheet" href="{% static 'css/auth.css' %}">
</head>
<div class="dashboard-container">
    <h2>Welcome, {{ username }}!</h2>
    <p>This is your dashboard. You are now logged in.</p>
    <a href="{% url 'logout' %}" class="logout-btn">Log Out</a>
</div>
{% endblock %}


authy
:root {
    /* Defining some brand colors so we can use them consistently */
    --blue-ncs: #1e88c5ff;
    --jonquil: #ffcc00ff;
    --davys-gray: #595959ff;
    --isabelline: #f5f1ecff;
    --white: #ffffffff;
    --black: #000000ff;
    --pigment-green: #4ca850ff;
}

/* The main container that holds the whole login or register page
   Makes sure it covers the whole screen with a cool background */
.auth-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: var(--davys-gray);
    background-image: url("{% static 'images/background.jpg' %}"); /* Background image for the vibe */
    background-size: cover;
    background-position: center;
}

/* The box where the login or registration content sits
   Dark overlay with a bit of transparency to make text pop */
.auth-background {
    background-color: rgba(0, 0, 0, 0.7); /* Transparent black for the overlay effect */
    padding: 40px;
    border-radius: 12px; /* Rounded corners for a softer look */
    text-align: center;
    width: 400px; /* Keeps it compact and centered */
    color: var(--white); /* White text for contrast */
}

/* Big, welcoming heading - stands out on the dark background */
.auth-content h2 {
    font-size: 32px;
    font-weight: 400; /* Not too bold, just right */
    margin-bottom: 20px;
    color: var(--white); /* Keep it easy on the eyes */
}

/* Styling for text and password inputs - makes them look modern and clean */
input[type="text"], input[type="password"], input[type="email"] {
    width: 100%; /* Full width so it looks neat */
    padding: 12px;
    margin: 8px 0;
    border-radius: 5px; /* Smooth rounded edges */
    border: 1px solid #444; /* Subtle border to define the input */
    background-color: #2b2b2b; /* Dark background for a sleek look */
    color: var(--white); /* White text for contrast */
    font-weight: 400; /* Just the right amount of thickness */
    transition: border-color 0.3s ease, background-color 0.3s ease; /* Smooth transitions for interactivity */
}

/* Change the input look when it’s active or focused */
input[type="text"]:focus, input[type="password"]:focus, input[type="email"]:focus {
    outline: none; /* Remove the default outline */
    border-color: var(--jonquil); /* Bright border to show focus */
    background-color: #595959; /* Slightly lighter background when focused */
}


/* Makes the password guidelines aligned to the left for a cleaner look */
ul {
    font-size: 14px; /* Make the text a bit smaller for a subtle look */
    text-align: left; /* Aligns the entire list to the left */
    margin: 10px 0;
    padding-left: 20px;
}

/* Error messages from the form will stand out with a bright color so can u easily visible */
ul.errorlist, .errorlist li {
    color: var(--jonquil) !important;
    margin: 5px 0;
    padding: 8px;
    list-style-type: none;
    background-color: #2b2b2b; /* Dark background to make yellow pop */
    border-radius: 5px; /* Rounded corners */
}
ul.errorlist, .errorlist li::before {
    content: '⚠️'; /* Add a warning emoji before the error message */
    padding: 8px;
}

li {
    font-size: 14px;
    margin-bottom: 5px;
    line-height: 1.4;
    color: var(--white); /* Keep it consistent with the theme */
}

/* Styling the guideline text to look modern and subtle */
span.helptext {
    font-size: 14px; /* Make it a bit smaller for a subtle look */
    color: var(--white); /* Light gray to make it less intrusive */
    margin: 5px 0 10px 0; /* Add some spacing to separate from the input */
    text-align: left; /* Align text to the left */
    display: block; /* Make it behave like a paragraph */
    line-height: 1.4; /* Space out the text a bit */
    opacity: 0.75; /* Soften the color a bit */
}



/* The main button - looks bold and inviting */
.auth-btn {
    width: 100%; /* Full-width button for better usability */
    padding: 12px;
    margin: 10px 0;
    background-color: var(--jonquil); /* Bright and attention-grabbing */
    color: var(--black); /* Dark text for contrast */
    border: none; /* Keep it clean, no outlines */
    border-radius: 5px; /* Smooth rounded edges */
    font-size: 18px;
    cursor: pointer; /* Let the user know it’s clickable */
    font-weight: 600; /* Make it stand out */
    transition: background-color 0.3s ease, transform 0.2s ease; /* Smooth hover effect */
}

/* Subtle hover effect to make it feel responsive */
.auth-btn:hover {
    background-color: var(--blue-ncs); /* A bit darker to show interaction */
    color: var(--white); /* White text for contrast */
    transform: scale(1.02); /* Slightly bigger to grab attention */
}

/* Links like "Forgot password" or "Register here" */
.auth-link {
    color: var(--white); /* Keep it consistent with the background */
    text-decoration: underline; /* Make it obvious it's a link */
    margin-top: 10px;
    font-weight: 400; /* Regular font weight to blend in */
}

/* Hover effect for links - changes color to make it clear */
.auth-link:hover {
    color: var(--jonquil); /* Bright yellow to grab attention */
    text-decoration: none; /* Get rid of the underline for a cleaner look */
}

/* Thin, soft line to divide content or separate sections */
.divider {
    border: none;
    height: 1px;
    background-color: #555; /* Subtle gray, not too harsh */
    margin: 20px 0;
    opacity: 0.7; /* Slight transparency to keep it light */
}


.dashboard-container {
    margin: 50px auto;
    text-align: center;
    padding: 20px;
    max-width: 600px;
    background-color: #2b2b2b;
    border-radius: 8px;
    color: var(--white);
}

.logout-btn {
    margin-top: 20px;
    padding: 10px 20px;
    background-color: var(--jonquil);
    color: var(--black);
    border: none;
    border-radius: 5px;
    font-size: 16px;
    cursor: pointer;
    text-decoration: none;
}

.logout-btn:hover {
    background-color: #e6b800;
}

                  

views
from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from .forms import CustomUserCreationForm, CustomUserLoginForm
from .models import Profile


def register(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            # Automatically create a profile linked to the new user
            Profile.objects.create(user=user, firstname=user.username, lastname="Not provided", email=user.email)
            messages.success(request, 'Registration successful!')
            return redirect('login')
    else:
        form = CustomUserCreationForm()
    return render(request, 'register.html', {'form': form})

def login_view(request):
    if request.method == 'POST':
        form = CustomUserLoginForm(data=request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(request, username=username, password=password)
            if user is not None:
                login(request, user)
                messages.success(request, 'Login successful!')
                return redirect('dashboard')  # Redirect to dashboard after login
            else:
                messages.error(request, 'Invalid credentials.')
    else:
        form = CustomUserLoginForm()
    return render(request, 'login.html', {'form': form})

@login_required
def logout_view(request):
    logout(request)
    messages.success(request, 'Logged out successfully!')
    return redirect('login')

@login_required
def dashboard(request):
    username = request.user.username  # Get the logged-in user's username
    return render(request, 'dashboard.html', {'username': username})


  STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
dash
{% extends 'base.html' %}
{% load static %}
{% block content %}
<head>
    <link rel="stylesheet" href="{% static 'css/auth.css' %}">
</head>
<div class="dashboard-container">
    <h2>Welcome, {{ username }}!</h2>
    <p>This is your dashboard. You are now logged in.</p>
    <a href="{% url 'logout' %}" class="logout-btn">Log Out</a>
</div>
{% endblock %}

models
from django.db import models
from django.contrib.auth.models import User

# Create your models here.

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)  # Link to Django User
    firstname = models.CharField(max_length=100)
    lastname = models.CharField(max_length=100)
    email = models.EmailField()

    def __str__(self):
        return f'{self.firstname} {self.lastname}'

forms 
from django import forms
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from django.contrib.auth.models import User

class CustomUserCreationForm(UserCreationForm):
    email = forms.EmailField(required=True)

    class Meta:
        model = User
        fields = ['username', 'email', 'password1', 'password2']

class CustomUserLoginForm(AuthenticationForm):
    class Meta:
        model = User
        fields = ['username', 'password']

urls
from django.urls import path
from . import views

urlpatterns = [
    path('', views.home, name='home'),
    path('login/', views.login_view, name='login'),
    path('logout/', views.logout_view, name='logout'),
    path('register/', views.register, name='register'),
    path('dashboard/', views.dashboard, name='dashboard'),  # New dashboard route
    path('products/', views.products, name='products'),
    path('green-energy/', views.green_energy, name='green_energy'),
    path('booking/', views.booking, name='booking'),
    path('carbon-calculator/', views.carbon_calculator, name='carbon_calculator'),
    path('contact/', views.contact, name='contact'),
]


STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
py manage.py makemigrations 
py manage.py migrate
py manage.py createsuperuser

